// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"attendance-record/client"
	"attendance-record/client/model"
	"attendance-record/domain/interfaces"
	"attendance-record/domain/service"
	"attendance-record/infrastructure"
	"attendance-record/infrastructure/repository"
	"attendance-record/shared"
	"attendance-record/usecase"
)

// Injectors from wire.go:

func initApp() *shared.App {
	db := infrastructure.NewDBSingleton()
	iWorkRepository := repository.NewWorkSqlRepository(db)
	iRestRepository := repository.NewRestSqlRepository(db)
	timeStatusRepositorySet := interfaces.NewTimeStatusRepositorySet(iWorkRepository, iRestRepository)
	timeStatusService := service.NewTimeStatusService(timeStatusRepositorySet)
	timeStatusUseCase := usecase.NewTimeStatusUseCase(timeStatusService, timeStatusRepositorySet)
	iConfigRepository := repository.NewConfigRepository()
	app := shared.NewAppSingleton(timeStatusUseCase, iConfigRepository)
	return app
}

func initClient() *client.Client {
	db := infrastructure.NewDBSingleton()
	iWorkRepository := repository.NewWorkSqlRepository(db)
	iRestRepository := repository.NewRestSqlRepository(db)
	timeStatusRepositorySet := interfaces.NewTimeStatusRepositorySet(iWorkRepository, iRestRepository)
	timeStatusService := service.NewTimeStatusService(timeStatusRepositorySet)
	timeStatusUseCase := usecase.NewTimeStatusUseCase(timeStatusService, timeStatusRepositorySet)
	iConfigRepository := repository.NewConfigRepository()
	app := shared.NewAppSingleton(timeStatusUseCase, iConfigRepository)
	iTimeStatusApi := model.NewTimeStatusLocalApi(app)
	iConfigApi := model.NewConfigLocalApi(iConfigRepository)
	clientClient := client.NewClient(iTimeStatusApi, iConfigApi)
	return clientClient
}
